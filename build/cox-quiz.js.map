{"version":3,"file":"cox-quiz.js","sources":["../src/cox-quiz.ts"],"sourcesContent":["import { LitElement, css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators.js\";\nimport { when } from \"lit/directives/when.js\";\n\nclass QuizForm {\n  name: String;\n  answers: Array<String>;\n  constructor(\n    _name: String,\n    _answers: Array<String>,\n  ) {\n    this.name = _name;\n    this.answers = _answers;\n  }\n}\n/**\n * An example element.\n *\n * @slot - This element has a slot\n * @csspart button - The button\n */\n\n@customElement(\"cox-quiz\")\nexport class CoxQuiz extends LitElement {\n  static styles = css`\n    h3 {\n      text-align: center;\n    }\n    ul {\n      list-style-type: none;\n    }\n    .quiz-container {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n    .answer__list {\n      display: flex;\n      flex-wrap: wrap;\n      max-width: 400px;\n    }\n    .answer__list-item {\n      flex: 1 0 100px;\n    }\n  `;\n  @property({ type: QuizForm })\n  question = {\n    name: \"What color is the dog ???\",\n    answers: [\"blue\", \"black\", \"red\", \"yellow\"],\n  };\n  @property({type: String})\n  correctAnswer = 'black';\n\n  private isPassed = false;\n  private isSelected = false;\n  \n  render() {\n    if(typeof this.question === \"string\"){\n      const convert = JSON.parse(this.question);\n      this.question = convert\n    }\n    return html`\n      ${when(\n        this.isPassed,\n        () => html`\n          <div\n            style=\"display: flex; flex-direction: column; align-items:center\"\n          >\n            <h1 style=\"text-align: center\">Passed</h1>\n            <button style=\"max-width: 50px\" @click=\"${this.resetQuiz}\">\n              Reset\n            </button>\n          </div>\n        `,\n        () => {\n          return html`\n            <div class=\"quiz-container\">\n              <h3>${this.question.name}</h3>\n              <ul class=\"answer__list\">\n                ${this.question.answers.map((answer, answerIndex) => {\n                  return html`\n                    <li class=\"answer__list-item\">\n                      <div class=\"item__checkbox\">\n                        <input\n                          ?disabled=${this.isSelected}\n                          @input=${this.onSelected}\n                          id=\"${answer}\"\n                          name=\"${this.question}\"\n                          type=\"radio\"\n                          value=\"${answer}\"\n                        />\n                        <label for=\"${answer}\"\n                          >${this.numberToAlphabet(\n                            answerIndex + 1\n                          )}.${answer}</label\n                        >\n                      </div>\n                    </li>\n                  `;\n                })}\n              </ul>\n              <h1>${this.message}</h1>\n              <button ?hidden=${!this.isSelected} style=\"max-width: 50px\" @click=\"${this.resetQuiz}\">\n                Reset\n              </button>\n            </div>\n          `;\n        }\n      )}\n    `;\n  }\n\n  private numberToAlphabet(number: number) {\n    if (Number.isInteger(number) && number > 0) {\n      return String.fromCharCode(number + 64);\n    } else {\n      return \"Invalid input. Please provide a positive integer.\";\n    }\n  }\n\n  private message = \"\";\n  private onSelected(e: Event) {\n    e.preventDefault();\n    const input = e.target as HTMLInputElement;\n    const isCorrect = this.correctAnswer === input.value;\n    if (isCorrect) {\n      this.isPassed = !this.isPassed;\n      this.isSelected = !this.isSelected;\n      this.requestUpdate();\n    } else {\n      this.message = \"Your answer is incorrect\";\n      this.isSelected = !this.isSelected;\n      this.requestUpdate();\n    }\n  }\n  private resetQuiz() {\n    this.isPassed = false;\n    this.isSelected = false;\n    this.message = '';\n    this.requestUpdate();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cox-quiz\": CoxQuiz;\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAIA,MAAM,SAAS;AAAA,EAGb,YACE,OACA,UACA;AACA,SAAK,OAAO;AACZ,SAAK,UAAU;AAAA,EACjB;AACF;AASa,IAAA,UAAN,cAAsB,WAAW;AAAA,EAAjC,cAAA;AAAA,UAAA,GAAA,SAAA;AAuBM,SAAA,WAAA;AAAA,MACT,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,SAAS,OAAO,QAAQ;AAAA,IAAA;AAG5B,SAAA,gBAAA;AAEhB,SAAQ,WAAW;AACnB,SAAQ,aAAa;AAkErB,SAAQ,UAAU;AAAA,EAAA;AAAA,EAhElB,SAAS;AACJ,QAAA,OAAO,KAAK,aAAa,UAAS;AACnC,YAAM,UAAU,KAAK,MAAM,KAAK,QAAQ;AACxC,WAAK,WAAW;AAAA,IAClB;AACO,WAAA;AAAA,QACH;AAAA,MACA,KAAK;AAAA,MACL,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,sDAKwC,KAAK,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,MAK5D,MAAM;AACG,eAAA;AAAA;AAAA,oBAEG,KAAK,SAAS,IAAI;AAAA;AAAA,kBAEpB,KAAK,SAAS,QAAQ,IAAI,CAAC,QAAQ,gBAAgB;AAC5C,iBAAA;AAAA;AAAA;AAAA;AAAA,sCAIa,KAAK,UAAU;AAAA,mCAClB,KAAK,UAAU;AAAA,gCAClB,MAAM;AAAA,kCACJ,KAAK,QAAQ;AAAA;AAAA,mCAEZ,MAAM;AAAA;AAAA,sCAEH,MAAM;AAAA,6BACf,KAAK;AAAA,YACN,cAAc;AAAA,UAAA,CACf,IAAI,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,QAAA,CAKpB,CAAC;AAAA;AAAA,oBAEE,KAAK,OAAO;AAAA,gCACA,CAAC,KAAK,UAAU,oCAAoC,KAAK,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,MAK1F;AAAA,IAAA,CACD;AAAA;AAAA,EAEL;AAAA,EAEQ,iBAAiB,QAAgB;AACvC,QAAI,OAAO,UAAU,MAAM,KAAK,SAAS,GAAG;AACnC,aAAA,OAAO,aAAa,SAAS,EAAE;AAAA,IAAA,OACjC;AACE,aAAA;AAAA,IACT;AAAA,EACF;AAAA,EAGQ,WAAW,GAAU;AAC3B,MAAE,eAAe;AACjB,UAAM,QAAQ,EAAE;AACV,UAAA,YAAY,KAAK,kBAAkB,MAAM;AAC/C,QAAI,WAAW;AACR,WAAA,WAAW,CAAC,KAAK;AACjB,WAAA,aAAa,CAAC,KAAK;AACxB,WAAK,cAAc;AAAA,IAAA,OACd;AACL,WAAK,UAAU;AACV,WAAA,aAAa,CAAC,KAAK;AACxB,WAAK,cAAc;AAAA,IACrB;AAAA,EACF;AAAA,EACQ,YAAY;AAClB,SAAK,WAAW;AAChB,SAAK,aAAa;AAClB,SAAK,UAAU;AACf,SAAK,cAAc;AAAA,EACrB;AACF;AAtHa,QACJ,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBhB,gBAAA;AAAA,EADC,SAAS,EAAE,MAAM,UAAU;AAAA,GAtBjB,QAuBX,WAAA,YAAA,CAAA;AAKA,gBAAA;AAAA,EADC,SAAS,EAAC,MAAM,QAAO;AAAA,GA3Bb,QA4BX,WAAA,iBAAA,CAAA;AA5BW,UAAN,gBAAA;AAAA,EADN,cAAc,UAAU;AAAA,GACZ,OAAA;"}